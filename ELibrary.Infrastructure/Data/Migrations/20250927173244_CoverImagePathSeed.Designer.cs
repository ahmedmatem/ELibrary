// <auto-generated />
using System;
using ELibrary.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ELibrary.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250927173244_CoverImagePathSeed")]
    partial class CoverImagePathSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ELibrary.Infrastructure.Data.Models.Resource", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Gets or sets the unique identifier for the data model record.");

                    b.Property<string>("CoverImagePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Gets or sets the date and time when the record was created.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Gets or sets the date and time when the record was marked as deleted..");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Gets or sets a value indicating whether the record has been marked as deleted.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Gets or sets the date and time when the record was last modified.");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Resources");

                    b.HasData(
                        new
                        {
                            Id = "c665888c-8ae4-492c-b766-4128a7e828ee",
                            CoverImagePath = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTu5dP-doCEi_ENZ0MohLSohexccNWBwwYlVg&s",
                            Description = "Basic algebra concepts for beginners.",
                            FilePath = "",
                            IsDeleted = false,
                            Subject = "Mathematics",
                            Title = "Introduction to Algebra",
                            Type = 0,
                            UploadedOn = new DateTime(2025, 9, 27, 17, 32, 43, 317, DateTimeKind.Utc).AddTicks(4792)
                        },
                        new
                        {
                            Id = "9311918f-bb81-4b2f-b2c7-66918308adb0",
                            CoverImagePath = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTAhAgn6PoF2RrL0mTnTVKq4DXHrbIKd5G20w&s",
                            Description = "A timeline of major world history events.",
                            FilePath = "",
                            IsDeleted = false,
                            Subject = "History",
                            Title = "World History Overview",
                            Type = 0,
                            UploadedOn = new DateTime(2025, 9, 27, 17, 32, 43, 317, DateTimeKind.Utc).AddTicks(4792)
                        },
                        new
                        {
                            Id = "91f882d8-1765-4912-9f45-ea4bc25a0e93",
                            CoverImagePath = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR-z4VBEey9QK4XPYMXK3lkFI9zec7AVUM8sg&s",
                            Description = "Short video explaining photosynthesis process.",
                            FilePath = "",
                            IsDeleted = false,
                            Subject = "Biology",
                            Title = "Photosynthesis Explained",
                            Type = 1,
                            UploadedOn = new DateTime(2025, 9, 27, 17, 32, 43, 317, DateTimeKind.Utc).AddTicks(4792)
                        },
                        new
                        {
                            Id = "9d28e790-8981-4b34-9975-4d51e164b845",
                            CoverImagePath = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQHRGvbwPxrbxNYWyGFtHsuTPtrEwVJWDJf4A&s",
                            Description = "An overview of Newton's three laws of motion.",
                            FilePath = "",
                            IsDeleted = false,
                            Subject = "Physics",
                            Title = "Newton's Laws of Motion",
                            Type = 0,
                            UploadedOn = new DateTime(2025, 9, 27, 17, 32, 43, 317, DateTimeKind.Utc).AddTicks(4792)
                        },
                        new
                        {
                            Id = "fdba7d71-696b-4183-a306-f95918c9a6e9",
                            CoverImagePath = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT7YTHf1DDxgEYh5S8wRH9rPYj4gHwTGf1GTQ&s",
                            Description = "Video lessons for basic French vocabulary.",
                            FilePath = "",
                            IsDeleted = false,
                            Subject = "Languages",
                            Title = "Learn French Basics",
                            Type = 1,
                            UploadedOn = new DateTime(2025, 9, 27, 17, 32, 43, 317, DateTimeKind.Utc).AddTicks(4792)
                        },
                        new
                        {
                            Id = "33a2716e-df38-4050-a223-45191a2205b3",
                            CoverImagePath = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSraYINVd1T85796jgxTNZkOsdIFgB9kwx2rw&s",
                            Description = "Reference guide to elements in the periodic table.",
                            FilePath = "",
                            IsDeleted = false,
                            Subject = "Chemistry",
                            Title = "Periodic Table Reference",
                            Type = 0,
                            UploadedOn = new DateTime(2025, 9, 27, 17, 32, 43, 317, DateTimeKind.Utc).AddTicks(4792)
                        },
                        new
                        {
                            Id = "cb1eb638-4679-4146-9d9a-485ad0976002",
                            CoverImagePath = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSWshjlQbu3zszK0jh2L_TwIc5Sm81KaSp63A&s",
                            Description = "Beginner-friendly programming concepts.",
                            FilePath = "",
                            IsDeleted = false,
                            Subject = "Computer Science",
                            Title = "Introduction to Programming",
                            Type = 0,
                            UploadedOn = new DateTime(2025, 9, 27, 17, 32, 43, 317, DateTimeKind.Utc).AddTicks(4792)
                        },
                        new
                        {
                            Id = "d272c554-0ef6-467b-91b2-2009aecc861a",
                            CoverImagePath = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTwMtF9HZNRaZHdTiKVcfPAo37lZXoUD0eOMQ&s",
                            Description = "Article about global warming and its effects.",
                            FilePath = "",
                            IsDeleted = false,
                            Subject = "Environmental Science",
                            Title = "Climate Change and Its Impact",
                            Type = 3,
                            UploadedOn = new DateTime(2025, 9, 27, 17, 32, 43, 317, DateTimeKind.Utc).AddTicks(4792)
                        },
                        new
                        {
                            Id = "56a6f0ff-3612-4bc5-bfbe-bfb5c4c0d071",
                            CoverImagePath = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTQ2_Bw8irY9VYn2pk5r9LcjSfopOg01evB3w&s",
                            Description = "PDF guide to understanding geometric shapes.",
                            FilePath = "",
                            IsDeleted = false,
                            Subject = "Mathematics",
                            Title = "Basic Geometry Shapes",
                            Type = 0,
                            UploadedOn = new DateTime(2025, 9, 27, 17, 32, 43, 317, DateTimeKind.Utc).AddTicks(4792)
                        },
                        new
                        {
                            Id = "f3d038b3-2702-4c42-9ee6-0eae131d7a79",
                            CoverImagePath = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQWLOImHrZv1Gi5dPoLPOa7YnPaYDgAvf6tfA&s",
                            Description = "Video lecture explaining supply and demand.",
                            FilePath = "",
                            IsDeleted = false,
                            Subject = "Economics",
                            Title = "Introduction to Economics",
                            Type = 1,
                            UploadedOn = new DateTime(2025, 9, 27, 17, 32, 43, 317, DateTimeKind.Utc).AddTicks(4792)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "adeac8a4-eb6f-4089-9443-8dc547b1fca6",
                            ConcurrencyStamp = "8b17c420-5b95-45d6-b44d-de3cde5e0ec2",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "d0b85c97-0bb1-4e8f-be48-cb3cd44b5308",
                            ConcurrencyStamp = "9f2c086f-200e-49f2-a3a3-1fd82c43d8d2",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        },
                        new
                        {
                            Id = "865d31da-4bb6-4663-8e7c-cbfdbdbfe380",
                            ConcurrencyStamp = "0f4b813b-b13c-47bf-8758-bcdfd57fd1bb",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
