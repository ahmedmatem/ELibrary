# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy ASP.Net Core app to Azure Web App - ppmg-library

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: read #This is required for actions/checkout

    steps:
      - uses: actions/checkout@v4

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'

      - name: Build with dotnet
        run: dotnet build --configuration Release

      - name: dotnet publish
        run: dotnet publish -c Release -o "${{env.DOTNET_ROOT}}/myapp"

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: .net-app
          path: ${{env.DOTNET_ROOT}}/myapp

  deploy:
    runs-on: windows-latest
    needs: build
    permissions:
      id-token: write #This is required for requesting the JWT
      contents: read #This is required for actions/checkout

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: .net-app
      
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_6F1915D6474D48459CEB69ED489092C4 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_0EA4A7D718394834A9265491F09CC660 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_BED382A2823A49869C8C72BB5F5169B9 }}

      - name: Update database (EF Core)
        shell: pwsh
        env:
          ConnectionStrings__DefaultConnection: ${{ secrets.SQL_CONNECTION }}
        run: |
          dotnet tool install --global dotnet-ef --version 8.*
          $env:PATH += ";$env:USERPROFILE\.dotnet\tools"
      
          # Find the project that contains the Migrations folder (first match)
          $migrationsProj = (Get-ChildItem -Recurse -Filter *.csproj |
            Where-Object { Test-Path (Join-Path $_.DirectoryName 'Migrations') } |
            Select-Object -First 1 -ExpandProperty FullName)
      
          if (-not $migrationsProj) {
            Write-Error "Could not find a project that contains a 'Migrations' folder."
            exit 1
          }
      
          # Find the web startup project (has Program.cs in same folder)
          $startupProj = (Get-ChildItem -Recurse -Filter Program.cs |
            ForEach-Object { $_.Directory.GetFiles('*.csproj') } |
            Select-Object -First 1 -ExpandProperty FullName)
      
          if (-not $startupProj) {
            Write-Error "Could not find a startup project (folder with Program.cs and a .csproj)."
            exit 1
          }
      
          Write-Host "Using --project       = $migrationsProj"
          Write-Host "Using --startup-project = $startupProj"
      
          dotnet ef database update --project "$migrationsProj" --startup-project "$startupProj" --verbose

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'ppmg-library'
          slot-name: 'Production'
          package: .

          




